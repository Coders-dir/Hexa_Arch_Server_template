name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction
      - name: Start test services (bring up docker-compose.test.yml)
        run: |
          set -euo pipefail
          COMPOSE_FILE=docker-compose.test.yml
          if ! command -v docker >/dev/null 2>&1; then
            echo "docker not found; installing docker and compose plugin"
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
          fi
          docker compose -f "$COMPOSE_FILE" up -d

      - name: Wait for services to be healthy
        run: |
          # wait for Postgres
          for i in {1..30}; do
            docker exec monolith-template-postgres-1 pg_isready -U test && break || sleep 1
          done
          # apply DB migrations for api_keys
          if [ -f db/migrations/001_create_api_keys.sql ]; then
            cat db/migrations/001_create_api_keys.sql | docker exec -i monolith-template-postgres-1 psql -U test -d test_db || true
          fi
          # wait a bit for other services
          sleep 5

      - name: Lint
        run: |
          # optional: enable ruff via pre-commit or install in CI
          echo "Skipping lint in CI skeleton"
      - name: Typecheck
        run: |
          echo "Typecheck step placeholder"
      - name: Run tests (monolith + microservices)
        run: |
          # Run monolith tests
          poetry run pytest -q
          # Run microservice tests (enter service dir and run via poetry)
          pushd ../microservices-template/services/user-service
          poetry run pytest -q || true
          popd

      - name: Tear down test services
        if: always()
        run: |
          set -euo pipefail
          COMPOSE_FILE=docker-compose.test.yml
          if command -v docker >/dev/null 2>&1; then
            docker compose -f "$COMPOSE_FILE" down || true
          fi
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image (SHA + latest)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/hexa-monolith:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/hexa-monolith:latest
