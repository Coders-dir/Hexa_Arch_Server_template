name: Postman smoke

on:
  workflow_dispatch:
    inputs:
      reason:
        description: "Optional reason for manual dispatch"
        required: false
  pull_request:
  push:
    branches: [ main ]

jobs:
  postman-smoke:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test" --health-interval=5s --health-timeout=5s --health-retries=20
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping" --health-interval=5s --health-timeout=5s --health-retries=20
      mongo:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ping:1})'" --health-interval=5s --health-timeout=5s --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - name: Skip if project template missing
        run: |
          if [ ! -d service-template ]; then
            echo "service-template not present; skipping postman smoke tests (non-fatal)."
            exit 0
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install runtime deps (Poetry)
        run: |
          python -m pip install --upgrade pip
          # Use a Poetry 1.x release that includes the 'export' command (Poetry 2.x removes/export moved)
          python -m pip install "poetry==1.4.2"
          poetry --version || true
          cd service-template
          poetry config virtualenvs.create false
          # prefer poetry install but tolerate failures and fall back to exported requirements
          if ! poetry install --no-interaction; then
            poetry export -f requirements.txt --without-hashes -o /tmp/requirements.txt
            python -m pip install -r /tmp/requirements.txt
          fi

      - name: Start app (uvicorn)
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test_db"
          REDIS_URL: "redis://localhost:6379/0"
          MONGO_URL: "mongodb://localhost:27017"
        run: |
          set -euo pipefail
          cd service-template
          # run migrations or any bootstrap steps if present
          if [ -f scripts/upgrade_db.sh ]; then
            bash scripts/upgrade_db.sh || true
          fi
          # start the app in background; redirect logs to a file
          nohup python -m uvicorn src.app.main:app --host 0.0.0.0 --port 8000 &> /tmp/uvicorn.log &

      - name: Wait for app healthy
        run: |
          for i in {1..60}; do
            if curl -sSf http://127.0.0.1:8000/health >/dev/null 2>&1; then
              echo "app healthy"
              break
            fi
            echo "waiting for app... $i"
            sleep 2
          done

      - name: Run smoke script
        run: |
          set -euo pipefail
          cd service-template
          python scripts/run_postman_smoke.py

      - name: Upload uvicorn log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: uvicorn-log
          path: /tmp/uvicorn.log
